application: myopenreviews
version: 1
runtime: python27
api_version: 1
threadsafe: true

libraries:
- name: pycrypto
  version: "2.3"

builtins:
- remote_api: on

inbound_services:
- mail_bounce

error_handlers:
- error_code: over_quota
  file: overquota.html

handlers:
######################################################################
##                  API
## authparams:
##   am: authentication method: "mid", "gsid", "fbid", "twid"
##   at: authentication token (from local or supported external source)
##   an: authentication name (username if native auth, whatever otherwise)
##
## Queries may return a base64 cursor value as the last element.
## Optional parameters are listed in parentheses
##
######################################################################

######################################################################
##        Native site authentication 

## Get an access token from native credentials
## POST params: user, pass 
- url: /login.*
  script: src.py.moracct.app

## Read native credentials and redirect back
## POST params: userin, passin (,returnto, command, view, prof/pen/revid)
- url: /redirlogin.*
  script: src.py.moracct.app

## Create a new native account
## POST params: user, pass, email
- url: /newacct.*
  script: src.py.moracct.app

## Email forgotten native account credentials
## POST params: email
- url: /mailcred.*
  script: src.py.moracct.app

## Change native account password
## POST params: password, authparams
- url: /chgpwd.*
  script: src.py.moracct.app

## Get login account details
## GET params: authparams
- url: /getacct.*
  script: src.py.moracct.app


######################################################################
##        Pen Names

## Fetch pen names for current authentication
## GET params: authparams
- url: /mypens.*
  script: src.py.pen.app

## Create new pen name for current authentication
## POST params: pen, authparams
- url: /newpen.*
  script: src.py.pen.app

## Update a pen name if authorized
## POST params: pen, authparams
- url: /updpen.*
  script: src.py.pen.app

## Upload a profile pic
## POST params: picfilein, _id, authparams
##   _id: The PenName instance id
- url: /profpicupload.*
  script: src.py.pen.app

## Retrieve a profile pic
## GET params: profileid
- url: /profpic.*
  script: src.py.pen.app

## Return pen names containing the qstr text.
## GET params: qstr, cursor, authparams
- url: /srchpens.*
  script: src.py.pen.app

## Return the pen name for the given id.
## GET params: penid
- url: /penbyid.*
  script: src.py.pen.app

## Return non-protected account information for the given pen
## GET params: penid, authparams
- url: /acctinfo
  script: src.py.pen.app

## Init an account email address for the given pen
## POST params: penid, email, authparams
- url: /penmail.*
  script: src.py.pen.app

## Note the given pen name was accessed
## POST params: penid, authparams
- url: /penacc.*
  script: src.py.pen.app



######################################################################
##        Relationships

## Find relationships matching the source or target pen id
## GET params: originid, relatedid, offset, cursor, authparams
- url: /findrels.*
  script: src.py.rel.app

## Create new relationship
## POST params: rel, authparams
- url: /newrel.*
  script: src.py.rel.app

## Delete relationship
## POST params: rel, authparams
- url: /delrel.*
  script: src.py.rel.app

## Update relationship
## POST params: rel, authparams
- url: /updrel.*
  script: src.py.rel.app



######################################################################
##        Reviews

## Create a new review for authorized pen name
## POST params: rev, authparams (, mode)
##   mode=batch leaves a processing note to avoid flooding the activity feed
- url: /newrev.*
  script: src.py.rev.app

## Update review for authorized pen name
## POST params: rev, authparams
##   _id of rev required
- url: /updrev.*
  script: src.py.rev.app

## Delete review for authorized pen name
## POST params: rev, authparams
- url: /delrev.*
  script: src.py.rev.app
  
## Upload a review pic
## POST params: picfilein, _id, authparams
##   _id: The Review instance id
- url: /revpicupload.*
  script: src.py.rev.app

## Retrieve a review pic
## GET params: revid
- url: /revpic.*
  script: src.py.rev.app

## Return reviews for a given pen within the given date range
## GET params: penid, mindate, maxdate, qstr, authparams (,revtype, oldfirst)
- url: /srchrevs.*
  script: src.py.rev.app

## Return the review for the given id.
## GET params: revid
- url: /revbyid.*
  script: src.py.rev.app

## Return the review looking up by revtype and cankey
## GET params: penid, revtype, cankey, authparams
- url: /revbykey
  script: src.py.rev.app

## Return reviews from any pen name ids in the given csv
## GET params: penids, since, cursor
- url: /revact.*
  script: src.py.rev.app

## Return pre-reviews for the given pen
## GET params: penid, authparams
- url: /fetchprerevs.*
  script: src.py.rev.app


######################################################################
##        Review Tags

## Note the specified review was helpful. helpful: "yes" or "no"
## POST params: penid, revid, helpful, authparams
- url: /notehelpful.*
  script: src.py.revtag.app

## Search the review tags for helpful marks, returning most recent first.
## Specify either penid or revid.  If revid, then penids is a CSV of one
## or more penid values to match.
## GET params: penid, revid, penids, authparams
- url: /srchhelpful.*
  script: src.py.revtag.app

## Note the specified review should be remembered.  remember: "yes" or "no"
## POST params: penid, revid, remember, authparams
- url: /noteremem.*
  script: src.py.revtag.app

## Search the review tags for remember marks, returning most recent first
## penids is a CSV of one or more penid values to match.
## GET params: penid, revid, penids, authparams
- url: /srchremem.*
  script: src.py.revtag.app



######################################################################
##        Review Links

## Return all ReviewLink entries for the given penid modified in the
## past 30 days
## GET params: penid, authparams
- url: /inlinks.*
  script: src.py.revlink.app


## Search the ReviewLink entries returning any that are in the given
## csv of review ids.
## GET params: revids, authparams
- url: /revlinks.*
  script: src.py.revlink.app


## Update the given ReviewLink
## POST params: revlink, authparams
- url: /updlink.*
  script: src.py.revlink.app


######################################################################
##        ReviewComments

## Fetch pending questions/comments from others
## GET params: penid, authparams
- url: /pendincmt.*
  script: src.py.revcmt.app


## Fetch pending questions/comments you have written
## GET params: penid, authparams
- url: /pendoutcmt.*
  script: src.py.revcmt.app


## Fetch accepted questions/comments for a specific review
## GET params: revid, authparams
- url: /revcmt.*
  script: src.py.revcmt.app


## Update a question/comment (reviewer)
## POST params: revcmt, authparams
- url: /updcmt.*
  script: src.py.revcmt.app


## Create a new question/comment (commenter)
## POST params: revcmt, authparams
- url: /crecmt.*
  script: src.py.revcmt.app


## Delete a comment you previously wrote (commenter)
## POST params: revcmt, authparams
- url: /delcmt.*
  script: src.py.revcmt.app


######################################################################
##        Requests

## Create or update a request
## POST params: request, authparams
- url: /updreq.*
  script: src.py.req.app

## Return requests matching the fromid or toid
## GET params: fromid or toid, authparams
- url: /findreqs.*
  script: src.py.req.app


######################################################################
##        Groups

## Create a new group or update a group description
## POST params: penid, group, authparams
- url: /grpdesc.*
  script: src.py.group.app

## Return the group for the given id
## GET params: groupid
- url: /grpbyid.*
  script: src.py.group.app

## Upload a group pic
## POST params: picfilein, _id, authparams
##   _id: Group instance id
- url: /grppicupload.*
  script: src.py.group.app

## Retrieve a group pic
## GET params: groupid
- url: /grppic.*
  script: src.py.group.app

## Post a review to a group
## POST params: penid, revid, groupid, authparams
- url: /grprev.*
  script: src.py.group.app

## Remove a posted review from a group
## POST params: penid, revid, groupid, reason, authparams
- url: /grpremrev.*
  script: src.py.group.app

## Apply for next level group membership
## POST params: penid, groupid, authparams
- url: /grpmemapply.*
  script: src.py.group.app

## Withdraw application for next level group membership
## POST params: penid, groupid, authparams
- url: /grpmemwithdraw.*
  script: src.py.group.app

## Reject application for next level group membership
## POST params: penid, groupid, seekerid, authparams
- url: /grpmemrej.*
  script: src.py.group.app

## Acknowledge rejection of group membership application
## POST params: penid, groupid, authparams
- url: /grprejok.*
  script: src.py.group.app

## Accept group membership application
## POST params: penid, groupid, seekerid, authparams
- url: /grpmemyes.*
  script: src.py.group.app

## Remove group membership
## POST params: penid, groupid, removeid, authparams
- url: /grpmemremove.*
  script: src.py.group.app

## Fetch groups by name
## GET params: groupname
- url: /grpbyname.*
  script: src.py.group.app

## Fetch general group statistics
## GET params: none
- url: /grpstats.*
  script: src.py.group.app

## Return groups whose name contains the qstr text
## GET params: qstr, cursor, authparams
- url: /srchgroups.*
  script: src.py.group.app


######################################################################
##        Connection Services

## Return a signed OAuth request given the specified parameters
## POST params: name, posturl, headparams, contentparams
- url: /oa1call.*
  script: src.py.consvc.app

## Return the specified JSON endpoint call results
## GET params: geturl
- url: /jsonget.*
  script: src.py.consvc.app

## Fetch an access token for GitHub
## GET params: code, state
- url: /githubtok.*
  script: src.py.consvc.app

## Fetch info from Amazon
## GET params: asin, authparams
- url: /amazoninfo.*
  script: src.py.consvc.app

## Fetch search results from Amazon
## GET params: revtype, title, authparams
- url: /amazonsearch.*
  script: src.py.consvc.app

## Fetch the contents of the given URL
## GET params: url, authparams
- url: /urlcontents.*
  script: src.py.consvc.app



######################################################################
# Test endpoints, static displays, data summaries and other crap not
# really part of the API
#
- url: /cluck2.*
  script: src.py.cluck2.app
- url: /cluck.*
  script: src.py.cluck.app
- url: /penwalk
  script: src.py.pen.app
- url: /testpens
  script: src.py.pen.app
- url: /testrevs
  script: src.py.rev.app
- url: /blogs/.*
  script: src.py.blogview.app
- url: /groups/.*
  script: src.py.groupview.app
- url: /statrev/\d+
  script: src.py.statrev.app
- url: /stats.*
  script: src.py.statweek.app
- url: /rssact.*
  script: src.py.rssact.app
- url: /rsspen.*
  script: src.py.rssact.app
- url: /rssgrp.*
  script: src.py.rssact.app
- url: /mailsum.*
  script: src.py.mailsum.app
- url: /emuser.*
  script: src.py.mailsum.app
- url: /activity.*
  script: src.py.mailsum.app
- url: /bytheway.*
  script: src.py.mailsum.app
- url: /bytheimg.*
  script: src.py.mailsum.app
- url: /botids.*
  script: src.py.mailsum.app
- url: /fixrefkeys.*
  script: src.py.mailsum.app
- url: /_ah/bounce
  script: src.py.mailsum.app
  login: admin
- url: /loginid.*
  script: src.py.moracct.app
# Trap anything ending with a slash and send it to index.html since there
# is no default processing to figure that out otherwise.
- url: (.*)/
  static_files: docroot/index.html
  upload: docroot
# Catchall is to look in docroot.
- url: /
  static_dir: docroot
