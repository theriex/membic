application: membicsys
version: 1
runtime: python27
api_version: 1
threadsafe: true

libraries:
- name: pycrypto
  version: "2.6.1"

builtins:
- remote_api: on

inbound_services:
- mail
- mail_bounce

error_handlers:
- error_code: over_quota
  file: overquota.html

handlers:
######################################################################
##                  API
## authparams:
##   am: authentication method: "mid", "gsid", "fbid", "twid"
##   at: authentication token (from local or supported external source)
##   an: authentication name (email if native auth, or 3rd party id info)
##
## Queries may return a base64 cursor value as the last element.
## Optional parameters are listed in parentheses
##
######################################################################

######################################################################
##        Native site authentication 

## Get an access token from native credentials
## POST params: user, pass 
- url: .*/toklogin.*
  script: src.py.muser.app

## Read native credentials and redirect back
## POST params: emailin, passin (,returnto, command, view, objid)
- url: .*/redirlogin.*
  script: src.py.muser.app

## Create a new native account
## POST params: user, pass, email
- url: .*/newacct.*
  script: src.py.muser.app

## Email password reset access link
## POST params: email
- url: .*/mailpwr.*
  script: src.py.muser.app

## Change native account password
## POST params: password, authparams
- url: .*/updacc.*
  script: src.py.muser.app

## Get login account
## GET params: authparams
- url: .*/getacct.*
  script: src.py.muser.app

## Send account activation code
## POST params: authparams
- url: .*/sendcode.*
  script: src.py.muser.app

## Activate account with key/code, or deactivate (status: Inactive)
## GET params: key, code, authparams
- url: .*/activate.*
  script: src.py.muser.app


######################################################################
##        Pen Names

## Create new pen name for current authentication
## POST params: pen, authparams
- url: .*/newpen.*
  script: src.py.pen.app

## Update a pen name if authorized
## POST params: pen, authparams
- url: .*/updpen.*
  script: src.py.pen.app

## Upload a profile pic
## POST params: picfilein, _id, authparams
##   _id: The PenName instance id
- url: .*/picupload.*
  script: src.py.pen.app

## Retrieve a profile pic
## GET params: profileid
- url: .*/profpic.*
  script: src.py.pen.app

## Toggle remembering a review
## GET params: revid, penid, authparams
- url: .*/togremember.*
  script: src.py.pen.app

## Return the pen name for the given id.
## GET params: penid
- url: .*/penbyid.*
  script: src.py.pen.app


######################################################################
##        Reviews (membics)

## Return the review feed for the given type
## GET params: revtype, authparams, penid
- url: .*/revfeed
  script: src.py.rev.app

## Toggle the helpful mark on the specified review from the specified pen
## GET params: revid, penid, authparams
- url: .*/toghelpful.*
  script: src.py.rev.app

## Write the given review and associated coop reviews
## POST params: authparams, rev, ctmids
- url: .*/saverev.*
  script: src.py.rev.app

## Delete review for authorized pen name
## POST params: rev, authparams
- url: .*/delrev.*
  script: src.py.rev.app

## Upload a review pic
## POST params: picfilein, _id, authparams
##   _id: The Review instance id
- url: .*/revpicupload.*
  script: src.py.rev.app

## Retrieve a review pic
## GET params: revid
- url: .*/revpic.*
  script: src.py.rev.app

## Rotate the uploaded pic for a review
## POST params: revid, authparams
- url: .*/rotatepic.*
  script: src.py.rev.app

## Return reviews for a given pen within the given date range
## GET params: penid, mindate, maxdate, qstr, authparams (,revtype)
- url: .*/srchrevs.*
  script: src.py.rev.app

## Return the review for the given id.
## GET params: revid
- url: .*/revbyid.*
  script: src.py.rev.app

## Return pre-reviews for the given pen
## GET params: penid, authparams
- url: .*/fetchprerevs.*
  script: src.py.rev.app

## Return recent and top reviews for a coop or pen
## GET params: ctmid or penid or authparams
- url: .*/blockfetch.*
  script: src.py.rev.app

## Batch post one or more reviews
## POST params: email, password, revsjson
- url: .*/batchupload.*
  script: src.py.rev.app


######################################################################
##        Coops

## Create a new coop or update a coop description
## POST params: penid, coop, authparams
- url: .*/ctmdesc.*
  script: src.py.coop.app

## Return the coop for the given id
## GET params: coopid
- url: .*/ctmbyid.*
  script: src.py.coop.app

## Retrieve a coop pic
## GET params: coopid
- url: .*/ctmpic.*
  script: src.py.coop.app

## Apply for next level coop membership
## POST params: action (apply/withdraw), penid, coopid, authparams
- url: .*/ctmmemapply.*
  script: src.py.coop.app

## Process membership application: reject, ignore, accept
## POST params: action, penid, coopid, seekerid, authparams
- url: .*/ctmmemprocess.*
  script: src.py.coop.app

## Fetch general coop statistics
## GET params: none
- url: .*/ctmstats.*
  script: src.py.coop.app

## Note membership invite for a cooperative theme
## POST params: penid, coopid, email, authparams
- url: .*/invitebymail.*
  script: src.py.coop.app

## Accept an invitation for a cooperative theme
## GET params: coopid, accountemail, invitetoken
## POST params: coopid, accountemail, authparams
- url: .*/acceptinvite.*
  script: src.py.coop.app


######################################################################
##        Connection Services

## Return a signed OAuth request given the specified parameters
## POST params: name, posturl, headparams, contentparams
- url: .*/oa1call.*
  script: src.py.consvc.app

## Return the specified JSON endpoint call results
## GET params: geturl
- url: .*/jsonget.*
  script: src.py.consvc.app

## Undecorated return endpoint for Twitter to callback
## GET params: oauth token info
- url: .*/twtok
  script: src.py.consvc.app

## Fetch an access token for GitHub
## GET params: code, state
- url: .*/githubtok.*
  script: src.py.consvc.app

## GitHub authentication callback endpoint
## GET params: code, state
- url: .*/githubcb.*
  script: src.py.consvc.app

## Fetch info from Amazon
## GET params: asin, authparams
- url: .*/amazoninfo.*
  script: src.py.consvc.app

## Fetch search results from Amazon
## GET params: revtype, title, authparams
- url: .*/amazonsearch.*
  script: src.py.consvc.app

## Fetch the contents of the given URL
## GET params: url, authparams
- url: .*/urlcontents.*
  script: src.py.consvc.app

## Fetch the given image url and return it.
## GET params: url, authparams
- url: .*/imagerelay.*
  script: src.py.consvc.app


######################################################################
# Summaries and stats

## Bump counter for profile or theme
## POST params: ctype, parentid, field [, penid, name, refer]
- url: .*/bumpmctr.*
  script: src.py.mctr.app

## Fetch counters for profile or theme
## GET params: authparams, ctype, parentid
- url: .*/getmctrs.*
  script: src.py.mctr.app

## Fetch current counter for profile or theme
## GET params: authparams, ctype, parentid, penid
- url: .*/currstat.*
  script: src.py.mctr.app

## Fetch RSS feed content for the specified coop
## GET params: ctmid
- url: .*/rsscoop.*
  script: src.py.rssact.app

## Fetch activity statistics for the site (used by actstat.js)
- url: /activity.*
  script: src.py.mailsum.app

## Fetch the sitemap for indexing crawler reference
- url: .*/sitemap.xml
  script: src.py.sitemap.app


######################################################################
# General config

## Inbound email handler
- url: /_ah/mail/.+
  script: src.py.mailsum.app
  login: admin

## Email bounce handler
- url: /_ah/bounce
  script: src.py.mailsum.app
  login: admin

## Nightly periodic processing, reminders and such.
- url: .*/periodic.*
  script: src.py.mailsum.app
  login: admin

## Return automated agents whose use of the site should not be counted.
- url: .*/botids.*
  script: src.py.mailsum.app

## Structural static directories
- url: .*/img/
  static_dir: docroot/img/
- url: .*/css/
  static_dir: docroot/css/
- url: .*/docs/
  static_dir: docroot/docs/
- url: .*/js/
  static_dir: docroot/js/

## Various flavors of start page requests:
## Direct request for a pen name (p) or theme (t) permalink
- url: /[p|t|e]/\d+.*
  script: src.py.start.app
## The index page
- url: /index.html
  script: src.py.start.app
## Anything else ending with a slash also goes to the start page
- url: .*/
  script: src.py.start.app
## Vanity theme access
- url: /\w+
  script: src.py.start.app
## Fetch a summary of recently updated profiles and themes
- url: .*/recentactive.*
  script: src.py.start.app


## Catchall is to look for a static file off docroot
- url: /
  static_dir: docroot
